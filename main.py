from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.middlewares.logging import LoggingMiddleware

import html
import asyncio
import config, user
from sqliter import DBConnection

loop = asyncio.get_event_loop()
bot = Bot(token=config.TOKEN, loop=loop, parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())
db = DBConnection()

def welcome_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(name) for name in ['üì§ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–ø–∞–º', 'üìù –ü–æ—Å—Ç']])
    keyboard.add(*[types.KeyboardButton(name) for name in ['üí¨ –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã', 'üïí –ò–Ω—Ç–µ—Ä–≤–∞–ª']])
    keyboard.add(*[types.KeyboardButton(name) for name in ['üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']])
    return keyboard

@dp.message_handler(commands=['start'])
async def process_start_command(m: types.Message):
    if m.chat.id == config.ADMIN:
        await bot.send_message(
    m.chat.id,
    "<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BLANT Autoposter 3.8!</b>\n\n"
    "‚Ä¢ –î–∞–Ω–Ω—ã–π –±–æ—Ç –±—ã–ª –∫—É–ø–ª–µ–Ω –≤ @blant_shop_bot\n"
    "‚Ä¢ –í–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞: 3.8 (3.8.2 build)\n\n"
    "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
    reply_markup=welcome_keyboard()
)
    else:
        await bot.send_message(m.chat.id, "‚ùå")
        
@dp.message_handler(lambda message: message.text == 'üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def send_info(message: types.Message):
    await message.answer(
        "üíæ <b>Version:</b> 3.8.2 build\n"
        "üíø <b>Last Update:</b> 27.10.2024\n\n"
        "‚òéÔ∏è <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç–¥–µ–ª:</b> @blant_support_bot",
        parse_mode='HTML'
    )

class addition(StatesGroup):
    id = State()

class post(StatesGroup):
    text = State()

class time(StatesGroup):
    timeout = State()

class channel_time(StatesGroup):
    id = State()
    timeout = State()

@dp.message_handler(state=addition.id)
async def input_report(m: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            channel_id = data['channel_id']
            db.add_additional_text(channel_id, m.text)
            await bot.send_message(m.chat.id, f'‚òëÔ∏è –¢–µ–∫—Å—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!')
            await state.finish()
    except:
        await bot.send_message(m.chat.id, f'‚ùå –¢–µ–∫—Å—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –Ω–µ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω!')

@dp.message_handler(state=post.text)
async def input_report(m: types.Message, state: FSMContext):
    db.change_text(m.text)
    await bot.send_message(m.chat.id, f'‚òëÔ∏è –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω.')
    await state.finish()

@dp.message_handler(state=time.timeout)
async def input_report(m: types.Message, state: FSMContext):
    try:
        if int(m.text) > 1:
            db.setTimeOut(m.text)
            await bot.send_message(m.chat.id, f'üïí –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.')
        else:
            await bot.send_message(m.chat.id, f'‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 1.')
    except:
        await bot.send_message(m.chat.id, f'‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.')
    await state.finish()

@dp.message_handler(state=channel_time.timeout)
async def input_report(m: types.Message, state: FSMContext):
    try:
        if int(m.text) > 1:
            async with state.proxy() as data:
                channel_id = data['channel_id']
                db.set_channel_timeout(channel_id, int(m.text))
                await bot.send_message(m.chat.id, f'üïíÔ∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.')
        else:
            await bot.send_message(m.chat.id, f'‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 1.')
    except:
        await bot.send_message(m.chat.id, f'‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.')
    await state.finish()

@dp.message_handler(content_types='text', state="*")
async def echo_message(m: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    if m.text == 'üí¨ –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã':
        chats = await user.get_chats()
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(*[types.InlineKeyboardButton(text=name, callback_data=cb) for name, cb in {f'{_["title"]}': f'EDIT_ID:{_["id"]}' for _ in chats}.items()])

        await bot.send_message(m.chat.id, 'üí¨ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã:', reply_markup=keyboard)
        
    elif m.text == 'üì§ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–ø–∞–º':
        db.setSpam(1)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in ['üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–º']])
        await bot.send_message(m.chat.id, 'üïπ –°–ø–∞–º —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!', reply_markup=keyboard)
        await start_spam("123456")
    elif m.text == 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–º':
        db.setSpam(0)
        await bot.send_message(m.chat.id, 'üó≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞–∫—Ä—É–≥–ª—è—é—Å—å', reply_markup=welcome_keyboard())
    elif m.text == 'üïí –ò–Ω—Ç–µ—Ä–≤–∞–ª':
        settings = db.settings()
        keyboard.add(*[types.InlineKeyboardButton(text=name, callback_data=cb) for name, cb in {'üïò –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª':'INTERVAL'}.items()])
        await bot.send_message(m.chat.id, f'üîÉ <b>–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:</b> {settings[5]} –º–∏–Ω—É—Ç(–∞)', reply_markup=keyboard)

    elif m.text == 'üìù –ü–æ—Å—Ç':
        settings = db.settings()
        try:
            with open(f'{config.DIR}{settings[1]}', 'rb') as photo:
                await bot.send_photo(m.chat.id, photo, caption=settings[2])

        except:
            await bot.send_message(m.chat.id, settings[2])

        keyboard.add(*[types.InlineKeyboardButton(text=name, callback_data=cb) for name, cb in
                       {'üìú –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç': 'EDIT_TEXT'}.items()])
        keyboard.add(*[types.InlineKeyboardButton(text=name, callback_data=cb) for name, cb in
                       {'üèô –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ':'EDIT_PHOTO'}.items()])
        keyboard.add(*[types.InlineKeyboardButton(text=name, callback_data=cb) for name, cb in
                       {'‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ': 'DEL_PHOTO'}.items()])
        await bot.send_message(m.chat.id, '<b>üîù –í–∞—à –ø–æ—Å—Ç –≤—ã–≥–ª—è–¥–∏—Ç –≤–æ—Ç —Ç–∞–∫ üîù</b>\n\n‚Ä¢ –î–ª—è –ø–æ—Å—Ç–∞ —Å —à—Ä–∏—Ñ—Ç–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @format_robot', reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data, state="*")
async def poc_callback_but(c: types.CallbackQuery, state: FSMContext):
    m = c.message
    keyboard = types.InlineKeyboardMarkup()
    if 'EDIT_ID:' in c.data:
        channel_id = c.data.split(':')[1]
        try:
            addit_text = db.get_additional_text(channel_id)[0]
        except:
            addit_text = None
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(*[types.InlineKeyboardButton(text=name, callback_data=cb) for name, cb in
                       {'‚ùå –ü–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç': f'LFC:{channel_id}', 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–º': f'STOP_SPAM:{channel_id}', 'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É': f'CHANGE_TIMEOUT:{channel_id}'}.items()])
        if addit_text != None:
            keyboard.add(*[types.InlineKeyboardButton(text=name, callback_data=cb) for name, cb in
                           {'üóÉ –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç': f'ADD_ADDITIONAL:{channel_id}'}.items()])
            await bot.send_message(m.chat.id, f'üóÉ –¢–µ–∫—É—â–∏–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞: {addit_text}', reply_markup=keyboard)
        else:
            keyboard.add(*[types.InlineKeyboardButton(text=name, callback_data=cb) for name, cb in
                           {'üóÉ –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç': f'ADD_ADDITIONAL:{channel_id}'}.items()])
            await bot.send_message(m.chat.id, f'üóÉ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', reply_markup=keyboard)
    elif 'ADD_ADDITIONAL:' in c.data:
        channel_id = c.data.split(':')[1]
        async with state.proxy() as data:
            data['channel_id'] = channel_id
        await bot.send_message(m.chat.id, f'üí¨ –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞:', reply_markup=keyboard)
        await addition.first()
    elif 'LFC:' in c.data:
        log = await user.leave_from_channel(c.data.split(':')[1])
        if log:
            text = f'‚òëÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –¥–∞–Ω–Ω—ã–π —á–∞—Ç.'
        else:
            text = '‚ùå –í–æ–∑–Ω–∏–∫–ª–∏ –Ω–µ–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ.'
        await bot.send_message(m.chat.id, text)
    elif 'STOP_SPAM:' in c.data:
        channel_id = c.data.split(':')[1]
        db.stop_spam_for_channel(channel_id)
        await bot.send_message(m.chat.id, f'üõë –°–ø–∞–º –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')
    elif 'CHANGE_TIMEOUT:' in c.data:
        channel_id = c.data.split(':')[1]
        async with state.proxy() as data:
            data['channel_id'] = channel_id
        await bot.send_message(m.chat.id, 'üïí –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö):')
        await channel_time.next()
    elif 'EDIT_TEXT' == c.data:
        await bot.send_message(m.chat.id, 'üìÑ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:')
        await post.first()
    elif 'EDIT_PHOTO' == c.data:
        await bot.send_message(m.chat.id, 'üèô –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:')
    elif 'INTERVAL' == c.data:
        await bot.send_message(m.chat.id, 'üïí –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö):')
        await time.first()
    elif 'DEL_PHOTO' == c.data:
        db.change_photo('')
        await bot.send_message(m.chat.id, '‚ùå –§–æ—Ç–æ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.')

@dp.message_handler(content_types=["photo"])
async def download_photo(m: types.Message):
    result = await m.photo[-1].download()
    db.change_photo(result.name)
    await bot.send_message(m.chat.id, 'üèô –§–æ—Ç–æ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.')

@dp.message_handler(content_types=["video"])
async def download_photo(m: types.Message):
    result = await m.video.download()
    db.change_photo(result.name)
    await bot.send_message(m.chat.id, 'üèô –§–æ—Ç–æ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.')

async def start_spam(x):
    if db.settings()[4] == 1:
        spam_list = []
        for i in await user.get_chats():
            try:
                addit_text = db.get_additional_text(i['id'])[0]
            except:
                addit_text = ''
            i['text'] = addit_text
            spam_list.append(i)
        settings = db.settings()
        tksNumber = asyncio.create_task(user.spamming(spam_list, settings, db))

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=start_spam)
